# -*- coding: utf-8 -*-
"""Picket_Fence.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Odi4t7aoO6T3XtWsoTwkBYsthKRmeyAb
"""

#Instalo pylinac e importo todo lo que necesito
!pip install pylinac
import datetime
import pydicom
import os
from pylinac.picketfence import PicketFence, MLC, Orientation
from google.colab import drive
#Conecto con mi drive y genero la ruta a mi carpeta de picket fence (PF- 1)
drive.mount('/content/drive')
my_directory = '/content/drive/My Drive/PPS - Intecnus/Python/PF- 1'
os.makedirs(my_directory, exist_ok=True)

# Muestro los archivos en mi carpeta para elegir uno.
# Si no se analizo la imagen antes, la misma viene sin extensión, en ese caso se la
# agregamos. Si se elige un archivo que no es una imagen DICOM o el número que se eligio no está en la lista
# se vuelven a mostrar todos los archivos para que se vuelva a elegir. También guardo el nombre del archivo
# de mi imagen para usarlo en el nombre del pdf
def seleccionar_archivo_y_verificar_extension(directorio):
    archivos = os.listdir(directorio)
    if not archivos:
        print("No hay archivos en el directorio.")
        return None, None

    archivo_seleccionado = None
    while archivo_seleccionado is None:
        print("\nArchivos disponibles:")
        for i, archivo in enumerate(archivos):
            print(f"{i}: {archivo}")

        try:
            indice = int(input("\nSelecciona el número del archivo que deseas: "))
            if 0 <= indice < len(archivos):
                archivo_completo = archivos[indice]
                nombre_archivo, extension = os.path.splitext(archivo_completo)

                if extension == '.dcm':
                    ruta_final = os.path.join(directorio, archivo_completo)
                    print(f"El archivo ya tiene la extensión .dcm: {ruta_final}")

                elif extension != '':
                    print("El archivo seleccionado no se corresponde con una imagen DICOM.")
                    archivo_seleccionado = None
                    continue

                else:
                    ruta_original = os.path.join(directorio, archivo_completo)
                    ruta_final = os.path.join(directorio, archivo_completo + '.dcm')
                    os.rename(ruta_original, ruta_final)
                    print(f"Archivo renombrado a: {ruta_final}")

                return ruta_final, nombre_archivo
            else:
                print("El número seleccionado no es válido. Por favor, selecciona uno de los números mostrados.")
        except ValueError:
            print("Por favor, ingresa un número válido.")

# Utilizo los metadatos de mi imagen DICOM para saber en que fecha y hora fue realizada la imagen.
# Los guardo para ponerlos en el pdf.
def Metadata(pf_img):
    dicom_dataset = pydicom.dcmread(pf_img)
    fecha_cruda = dicom_dataset.StudyDate
    fecha = fecha_cruda[:4] + "." + fecha_cruda[4:6] + "." + fecha_cruda[6:]
    hora_cruda = dicom_dataset.StudyTime
    hora = hora_cruda[:2] + ":" + hora_cruda[2:4]
    return fecha, hora

def main():
    """Función principal del programa."""
    ruta_final, nombre_archivo = seleccionar_archivo_y_verificar_extension(my_directory)
    print(f"Proceso finalizado. Archivo seleccionado: {ruta_final}")
    pf_img = ruta_final
    pf1 = PicketFence(pf_img, mlc=MLC.AGILITY) #En mlc elegimos el modelo del MLC, si no estuviera en pylinac se puede configurar de forma manual
    #el height_threshold lo disminuyo para disminuir el umbral que diferencia el fondo del picket, la idea de disminuirlo es para que detecte más hojas
    #el edge_threshold lo aumento para aumentar la desviación estándar que puede haber
    #también nos permite agarrar o quitar láminas de los bordes
    pf1.analyze(tolerance=0.5, action_tolerance=0.3, height_threshold = 0.5, edge_threshold= 3)
    current_datetime = datetime.datetime.now()
    formatted_datetime = current_datetime.strftime("%Y-%m-%d")
    fecha, hora = Metadata(pf_img)
    metadata = {"Fecha de la imagen": fecha + "; " + hora}
    logo_path = os.path.join(my_directory, 'logo.png')
    pdf_path = os.path.join(my_directory, f"Picket Fence {nombre_archivo} _ {formatted_datetime}.pdf")
    pf1.publish_pdf(filename=pdf_path, open_file=True, logo=logo_path, metadata=metadata)
if __name__ == "__main__":
    main()
